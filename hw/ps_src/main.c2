/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
// #include "platform.h"
#include "xil_printf.h"

#include <sleep.h>
#define AXI_BASEADDR 0x40000000

int main()
{
    // init_platform();

    print("Hello World SDRAM test.  Press key to start\n\r");
    inbyte();

    while(1)
    {
        u32 x;
        // u32 valid = 1;
    
        u32* sdram = (u32*) AXI_BASEADDR;
    
        // int Ncheck = 1 << 22;
    
        // ram is 4M x 4 x 16bit = 8M x 32bit words = 0x800000 words
        // u32 Ncheck = 0x400000;
        // u32 Ncheck = 0x200001;
        // u32 Ncheck = 0x101;
                     
        u32 n;
        // while (valid) {

        // xil_printf("\n\nInitializing RAM...\r\n");
        // for (u32 nn=0; nn < 0x200001; nn++)
        //     sdram[nn] = 0;


        // n=0x1FFF00;
        // xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        // n=0x1FFF01;
        // xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        // n=0x200000;
        // xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);

        sdram[0x1FFF00] = 0x1FFF00;
        sdram[0x1FFF01] = 0x1FFF01;
        sdram[0x1FFFFF] = 0x1FFFFF;
        sdram[0x210001] = 0x210001;
        sdram[0x210000] = 0x210000;
        sdram[0x200000] = 0x200000;
        sdram[0x200001] = 0x200001;

        n=0x1FFF00;
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        n=0x1FFF01;
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        n=0x200000;
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        n=0x210000;
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        n=0x210001;
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);
        xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, sdram[n]);


        // n=0x1FFF00;
        // x=0xdeadbeef;
        // sdram[n] = x;
        // xil_printf("W: [0x%x] (0x%x) <= 0x%x\r\n", n, n << 2, x);
        // x = sdram[n];
        // xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, x);

        // n=0x1FFF01;
        // x=0xabbaffee;
        // sdram[n] = x;
        // xil_printf("W: [0x%x] (0x%x) <= 0x%x\r\n", n, n << 2, x);
        // x = sdram[n];
        // xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, x);
        // n=0x1FFF00;
        // x = sdram[n];
        // xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, x);

        // n=0x200000;
        // x=0xcdcdbaab;
        // sdram[n] = x;
        // xil_printf("W: [0x%x] (0x%x) <= 0x%x\r\n", n, n << 2, x);
        // x = sdram[n];
        // xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, x);
        // n=0x1FFF01;
        // x = sdram[n];
        // xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, x);
        // n=0x1FFF00;
        // x = sdram[n];
        // xil_printf("R: [0x%x] (0x%x) => 0x%x\r\n", n, n << 2, x);
            
        print("Press key to rerun\n\r");
        inbyte();
        
    }

    return 0;
}
